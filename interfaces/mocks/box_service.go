// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import bson "gopkg.in/mgo.v2/bson"
import interfaces "github.com/jenarvaezg/MagicHub/interfaces"
import mock "github.com/stretchr/testify/mock"
import models "github.com/jenarvaezg/MagicHub/models"
import time "time"

// BoxService is an autogenerated mock type for the BoxService type
type BoxService struct {
	mock.Mock
}

// CreateBox provides a mock function with given fields: userID, teamID, name, openDate
func (_m *BoxService) CreateBox(userID bson.ObjectId, teamID bson.ObjectId, name string, openDate time.Time) (*models.Box, error) {
	ret := _m.Called(userID, teamID, name, openDate)

	var r0 *models.Box
	if rf, ok := ret.Get(0).(func(bson.ObjectId, bson.ObjectId, string, time.Time) *models.Box); ok {
		r0 = rf(userID, teamID, name, openDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId, bson.ObjectId, string, time.Time) error); ok {
		r1 = rf(userID, teamID, name, openDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTeamFiltered provides a mock function with given fields: limit, offset, teamID
func (_m *BoxService) FindByTeamFiltered(limit int, offset int, teamID bson.ObjectId) ([]*models.Box, error) {
	ret := _m.Called(limit, offset, teamID)

	var r0 []*models.Box
	if rf, ok := ret.Get(0).(func(int, int, bson.ObjectId) []*models.Box); ok {
		r0 = rf(limit, offset, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, bson.ObjectId) error); ok {
		r1 = rf(limit, offset, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotes provides a mock function with given fields: userID, box
func (_m *BoxService) GetNotes(userID bson.ObjectId, box *models.Box) ([]*models.Note, error) {
	ret := _m.Called(userID, box)

	var r0 []*models.Note
	if rf, ok := ret.Get(0).(func(bson.ObjectId, *models.Box) []*models.Note); ok {
		r0 = rf(userID, box)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId, *models.Box) error); ok {
		r1 = rf(userID, box)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNote provides a mock function with given fields: userID, boxID, text
func (_m *BoxService) InsertNote(userID bson.ObjectId, boxID bson.ObjectId, text string) (*models.Box, error) {
	ret := _m.Called(userID, boxID, text)

	var r0 *models.Box
	if rf, ok := ret.Get(0).(func(bson.ObjectId, bson.ObjectId, string) *models.Box); ok {
		r0 = rf(userID, boxID, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId, bson.ObjectId, string) error); ok {
		r1 = rf(userID, boxID, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnAllServicesRegistered provides a mock function with given fields: r
func (_m *BoxService) OnAllServicesRegistered(r interfaces.Registry) {
	_m.Called(r)
}
