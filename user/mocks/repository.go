// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import bson "gopkg.in/mgo.v2/bson"
import mock "github.com/stretchr/testify/mock"
import models "github.com/jenarvaezg/MagicHub/models"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindBy provides a mock function with given fields: findMap
func (_m *Repository) FindBy(findMap map[string]interface{}) ([]*models.User, error) {
	ret := _m.Called(findMap)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []*models.User); ok {
		r0 = rf(findMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(findMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id bson.ObjectId) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(bson.ObjectId) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0
func (_m *Repository) Store(_a0 *models.User) (bson.ObjectId, error) {
	ret := _m.Called(_a0)

	var r0 bson.ObjectId
	if rf, ok := ret.Get(0).(func(*models.User) bson.ObjectId); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bson.ObjectId)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
